<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="club.musician.dao.EmployeeCachedMapper">
    <!--
        配置二级缓存：
            1.eviction - 回收策略：
                LRU  - 默认，最近最少使用的：移除最长时间不被使用的对象
                FIFO - 先进先出：按对象进入缓存的顺序来移除他们
                SOFT - 软引用：移除基于垃圾回收期状态和软引用规则的对象
                WEAK - 弱引用：更积极的移除基于垃圾回收期状态和弱引用规则的对象
            2.flushInterval - 刷新间隔，单位毫秒
                默认情况下不设置，也就是没有刷新建个，缓存仅仅调用语句时刷新
            3.readOnly - 只读
                true - 只读缓存
                    mybatis会认为所有从缓存中获取数据的操作都是只读操作，不会修改数据
                    mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户
                    这种不安全，但是速度快
                false - 默认，读写缓存
                    mybatis就会觉得获取的数据可能会被修改
                    mybatis就会利用序列化&返序列化的技术克隆一份新的数据给你
                    会返回缓存对象的拷贝(通过序列化)。这会慢一些，但是安全，因此默认是false
            4.size - 引用数目，正整数
                代表缓存最多可以存储多少个对象，太大容易导致内存溢出
            5.type - 指定自定义缓存策略的全类名，implements Cache
     -->
<!--    <cache eviction="FIFO" flushInterval="6000" readOnly="false" size="1024">-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache">
        <property name="timeToIdleSeconds" value="3600"/><!--1 hour-->
        <property name="timeToLiveSeconds" value="3600"/><!--1 hour-->
        <property name="maxEntriesLocalHeap" value="1000"/>
        <property name="maxEntriesLocalDisk" value="10000000"/>
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>

    <resultMap id="AssociationResultMap" type="club.musician.entity.Employee">
        <!-- 指定主键对应封装规则,column指定列名，property指定JavaBean属性名 -->
        <id column="id" property="id"></id>
        <!-- 定义普通列 -->
        <result column="last_name" property="lastName"></result>
        <!-- 其他不指定的列，会自动封装：我们只要写resultMap一般都会写全的 -->
        <result column="gender" property="gender"/>

        <!--
            association可以指定联合的JavaBean对象
            property：是对应我们的Employee的对象属性名
            javaType:指定这个属性对象的类型[不可省略]
         -->
        <association property="department" javaType="club.musician.entity.Department">
            <id column="dept_id" property="id"></id>
            <result column="dept_name" property="name"></result>
        </association>
    </resultMap>


    <select id="getEmployeeAndDept" resultMap="AssociationResultMap">
        select e.id id,e.last_name last_name,e.gender gender,
               e.department_id department_id,d.id dept_id,d.name dept_name
        from tbl_employee e,tbl_department d
        where e.id=d.id and e.id = #{id}
    </select>

</mapper>