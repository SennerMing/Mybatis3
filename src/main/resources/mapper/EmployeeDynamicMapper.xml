<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="club.musician.dao.EmployeeDynamicMapper">

    <!--
        动态sql中 if、choose(where,otherwise)、trim(where,set)、foreach
     -->

    <!--
        查询员工，要求，携带了哪个字段，查询条件就带上这个字段的值
                id=#{id}
         and last_name like #{lastName}
         and email = #{email}
         and gender=#{gender}
     -->
    <select id="getEmployeeCondition" resultType="club.musician.entity.Employee"
            parameterType="club.musician.entity.Employee">
        select * from tbl_employee
        <where>
              <!--
                使用的是OGNL表达式
               -->
            <if test="id!=null">
                and id=#{id}
            </if>

            <if test="lastName!=null and lastName!=&quot;&quot; ">
                and last_name like #{lastName}
            </if>
            <if test="email != null and email.trim() != ''">
                 and email = #{email}
            </if>
              <!-- ognl会进行字符串和数字进行转换的 -->
            <if test="gender==0 or gender==1">
                and gender = #{gender}
            </if>
        </where>
    </select>


    <select id="getEmployeeConditionTrim" resultType="club.musician.entity.Employee"
            parameterType="club.musician.entity.Employee">
        select * from tbl_employee
            <!--
                后面多出的and或者or where标签不能解决
                prefix="":前缀
                    trim标签体中是整个字符串拼串后的结果
                    prefix给拼串后的整个字符串加一个前缀

                prefixOverrides="":前缀覆盖
                    去掉整个爱富川前面多余的字符串

                 suffix="":后缀
                    suffix给拼串后的整个字符串加一个后缀

                 suffixOverrides=""后缀覆盖
                    去掉整个字符串后面多余的字符
             -->
        <trim prefix="where" suffixOverrides="and">
            <!--
              使用的是OGNL表达式
             -->
            <if test="id!=null">
                id=#{id} and
            </if>

            <if test="lastName!=null and lastName!=&quot;&quot; ">
                last_name like #{lastName} and
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email} and
            </if>
            <!-- ognl会进行字符串和数字进行转换的 -->
            <if test="gender==0 or gender==1">
                gender = #{gender} and
            </if>
        </trim>
    </select>



    <!--
        分支选择:switch-case,带break
     -->
    <select id="getEmployeeConditionChoose" resultType="club.musician.entity.Employee"
            parameterType="club.musician.entity.Employee">
        select * from tbl_employee

        <where>
            <!--
              如果带了id就使用id查，，如果带了lastName就用lastName查，只会进入其中一个
             -->
            <choose>
                <when test="id != null">
                    id=#{id}
                </when>
                <when test="lastName != null">
                    last_name like #{lastName}
                </when>
                <when test="email != null">
                    email = #{email}
                </when>
                <otherwise>
                    gender = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <!--
        根据条件判断进行更新了
        set可以换成trim<trim suffix="set" suffixOverrides=",">
     -->
    <update id="updateEmployeeSet">
        update tbl_employee
        <set>
            <if test="lastName != null and lastName.trim() !=''">
                lastName = #{lastName},
            </if>
            <if test="email != null and email.trim() != ''">
                email like #{email}
            </if>
            <if test="gender != null and gender!=''">
                gender = #{gender}
            </if>
        </set>
        where id = #{id}
    </update>

    <!--
        使用foreach标签
    -->
    <select id="getEmployeeConditionForeach" resultType="club.musician.entity.Employee">
        select * from tbl_employee where id in
        <!--
            collection:指定要遍历的集合
                list类型的参数会进行特殊处理，封装到map中，map的key叫list

            item：将当前遍历出的元素赋值给指定的变量
            #{变量名}就能去除变量的值，也就是当前遍历出的元素

            separator:分隔符

            open:遍历出所有结果拼一个开始的字符
            close:遍历出所有结果拼一个结束的字符

            index:索引，遍历list的时候是索引
                       遍历map的时候index就是key，item就是value
         -->
        <foreach collection="ids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>
    </select>


    <!--
        foreach 批量保存功能
            insert into tbl_employee(last_name,email,gender,department_id)
            values
            ('xiaoZhang','xiaoZhang@musician.club','1',1),
            ('xiaoLi','xiaoLi@musician.club','0',1)
        Mysql支持values(),()
     -->
<!--    <insert id="addEmployeeForeach">-->
<!--        insert into tbl_employee(last_name,email,gender,department_id)-->
<!--        values-->
<!--        <foreach collection="employees" item="emp" separator=",">-->
<!--            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})-->
<!--        </foreach>-->
<!--    </insert>-->

    <!--
        foreach 批量保存功能
        多次执行sql
        Mysql默认不支持以";"来执行多个sql，需要在连接串上加如allowMultiQueries=true这个参数才行
     -->
    <insert id="addEmployeeForeach">
        <foreach collection="employees" item="emp" separator=";">
            insert into tbl_employee(
                <!-- 引用外部sql -->
                <include refid="insertSql">
                    <!-- 自定义一些属性 -->
                    <property name="testColumn" value="testValue"/>
                </include>
            )
            values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
        </foreach>
    </insert>

    <!--
        oracle 批量保存
            方式1：
            begin
                insert into tbl_employee(last_name,email,gender,department_id)
                values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id});
                insert into tbl_employee(last_name,email,gender,department_id)
                values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id});
            end;
            方式2（中间表）：
            insert into tbl_employee(id,last_name,email)
                select seq_employee.nextval,lastName,email form(
                    select 'last_name_a_01' lastName,'email_a_02' email from dual
                    union
                    select 'last_name_b_01' lastName,'email_b_02' email from dual
                    ...
                )
            这样就可以进行批量的插入了
     -->
<!--    <insert id="addEmployeeForeach" databaseId="oracle">-->
<!--        <foreach collection="employees" item="emp" separator=";" open="begin" close="end;">-->
<!--            insert into tbl_employee(last_name,email,gender,department_id)-->
<!--            values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})-->
<!--        </foreach>-->
<!--    </insert>-->

<!--    <insert id="addEmployeeForeach" databaseId="oracle">-->
<!--        insert into tbl_employee(last_name,email,gender,department_id)-->
<!--        select seq_employee.nextval,lastName,email form(-->
<!--        <foreach collection="employees" item="emp" separator="union">-->
<!--            select #{emp.lastName} lastName,#{emp.email} email from dual-->
<!--        </foreach>)-->

<!--    </insert>-->


    <!--
        两个内置参数：
            不只是方法传递过来的参数可以被用来判断，取值
            mybatis默认还有两个内置参数：
              1). _parameter:代表整个参数
                    单个参数：_parameter就是这个参数
                    多个参数：多个参数会被封装成一个map ===》 _parameter就代表这个map
              2). _databaseId:如果配置了databaseIdProvider标签
                    _databaseId:就是代表当前数据库的别名
     -->

<!--    List<Employee> testInnerParam(Employee employee)-->
<!--    <select id="testInnerParam" resultType="club.musician.entity.Employee">-->
<!--        <if test="_databaseId == 'mysql'">-->
<!--            select * from tbl_employee-->
<!--            <if test="_parameter != null">-->
<!--                <trim prefix="where" suffixOverrides="and">-->
<!--                    &lt;!&ndash;-->
<!--                      使用的是OGNL表达式-->
<!--                     &ndash;&gt;-->
<!--                    <if test="id!=null">-->
<!--                        id=#{id} and-->
<!--                    </if>-->

<!--                    <if test="lastName!=null and lastName!=&quot;&quot; ">-->
<!--                        last_name like #{lastName} and-->
<!--                    </if>-->
<!--                    <if test="email != null and email.trim() != ''">-->
<!--                        email = #{email} and-->
<!--                    </if>-->
<!--                    &lt;!&ndash; ognl会进行字符串和数字进行转换的 &ndash;&gt;-->
<!--                    <if test="gender==0 or gender==1">-->
<!--                        gender = #{gender} and-->
<!--                    </if>-->
<!--                </trim>-->
<!--            </if>-->
<!--        </if>-->
<!--        <if test="_databaseId == 'oracle'">-->
<!--            select * from tbl_employee_oracle-->

<!--        </if>-->
<!--    </select>-->

    <!--
        bind参数：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值
         <bind name="" value=""/>
         1.比如我想对last_name进行模糊查询 那传入的lastName参数就得是 %xx%
         2.还可以将sql改成 '%${lastname}%'，但是这样不安全
         3.bind标签 <bind name="_lastName" value="'%'+lastName+'%'"/>
    -->
    <select id="testInnerParam" resultType="club.musician.entity.Employee">
        <if test="_databaseId == 'mysql'">
            select * from tbl_employee
            <if test="_parameter != null">

                <bind name="_lastName" value="lastName+'%'"/>
                <trim prefix="where" suffixOverrides="and">
                    <if test="id!=null">
                        id=#{id} and
                    </if>

                    <if test="lastName!=null and lastName!=&quot;&quot; ">
                        last_name like #{_lastName} and
                    </if>
                    <if test="email != null and email.trim() != ''">
                        email = #{email} and
                    </if>
                    <!-- ognl会进行字符串和数字进行转换的 -->
                    <if test="gender==0 or gender==1">
                        gender = #{gender} and
                    </if>
                </trim>
            </if>
        </if>
        <if test="_databaseId == 'oracle'">
            select * from tbl_employee_oracle

        </if>
    </select>


    <!--
        sql标签，抽取可重用的sql片段，方便后面引用
        1.sql抽取：将咱们经常要查询的列名，或者插入用的列名抽取出来方便引用
        2.include引用：将已经抽取的sql引入到后面写的增删改标签中
                include还可以使用property标签自定义属性，sql中可以进行${引用key}
     -->
    <sql id="insertSql">
        <if test="_databaseId=='mysql'">
            last_name,email,gender,department_id
        </if>
        <if test="_databaseId=='oracle'">
            last_name,email,gender,department_id,oracle_field,${testColumn}
        </if>
    </sql>

</mapper>